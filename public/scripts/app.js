/* Sahaja Yoga Leela Game ‚Äî app.js (REV: stable screen-cap, html-to-image only)
   - Capture #resultCard ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏ô‡∏à‡∏≠‡∏î‡πâ‡∏ß‡∏¢ html-to-image
   - ‡∏£‡∏π‡∏õ‡∏™‡∏∏‡πà‡∏° inline ‡πÄ‡∏õ‡πá‡∏ô Data URL ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏ã‡∏ü‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)
   - ‡∏Å‡∏±‡∏ô‡∏•‡∏±‡πà‡∏ô‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å pointer events
   - Cooldown/Admin logic ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
*/

// ========== Constants ==========
const PLACEHOLDER_IMG =
  'data:image/svg+xml;utf8,' +
  encodeURIComponent(
    '<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="800">' +
      '<rect width="100%" height="100%" fill="#f3f4f6"/>' +
      '<text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="36" fill="#9ca3af">Image</text>' +
    '</svg>'
  );

const cfgDailyLock = document.getElementById('cfgDailyLock');
const CONFIG_KEY = 'leela:config:v3'; // bump ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
const LASTPLAY_PREFIX = 'leela:lastPlay:';
// ===== DEV switch (‡πÄ‡∏õ‡∏¥‡∏î = ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) =====
const DEV_BYPASS = false;   // <<< ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô false ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏à‡∏£‡∏¥‡∏á
// ========== DOM ==========
const inputCard     = document.getElementById('input-card'); // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° DOM element ‡πÉ‡∏´‡∏°‡πà
const form          = document.getElementById('player-form');
const playArea      = document.getElementById('play-area');
const playerNameEl  = document.getElementById('playerName');

const spinButton    = document.getElementById('spinButton');
const resultCard    = document.getElementById('resultCard');
const resultTitle   = document.getElementById('resultTitle');
const quoteEN       = document.getElementById('quoteEN');
const quoteTH       = document.getElementById('quoteTH');
const resultMeta    = document.getElementById('resultMeta');
const resultImage   = document.getElementById('resultImage');

const saveCard      = document.getElementById('saveCard');
const playAgain     = document.getElementById('playAgain');

const cooldownNote  = document.getElementById('cooldownNote');
const cdEn          = document.getElementById('cooldownCountdown');
const cdTh          = document.getElementById('cooldownCountdownTH');

// Admin
const adminPanel    = document.getElementById('adminPanel');
const cfgCooldown   = document.getElementById('cfgCooldownMin');
const cfgTesting    = document.getElementById('cfgTestingMode');
const cfgApiKey     = document.getElementById('cfgApiKey');
const cfgSave       = document.getElementById('cfgSave');

// (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ exportCard/exImage ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DOM ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ ‚Äú‡∏ô‡∏¥‡πà‡∏á‡πÑ‡∏ß‡πâ‚Äù ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô Data URL ‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô error)
const exportCard    = document.getElementById('exportCard') || null;
const exImage       = document.getElementById('exImage') || null;

// ========== State ==========
let player = { firstName: '', lastName: '' };
let QUOTES = [];
let IMAGES = [];
let dataReady = false;
let preRenderedCanvas = null; // üí° NEW: ‡πÄ‡∏Å‡πá‡∏ö Canvas ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤

let lastResult = null;     // { qi, img, ts }
let resultImgReady = null; // Promise: ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏ü

let holdTimer = null, holdStart = 0, holdMs = 0;
let spinning = false;
let startedHold = false;
let isRevealing = false;
let holdBound = false;

// ========== Config ==========
const CONFIG = loadConfig();  // { cooldownMin, testingMode, apiKey }

function loadConfig(){
  try{
    const raw = localStorage.getItem(CONFIG_KEY);
    if(!raw) return { cooldownMin: 0, testingMode: false, dailyLock: true, apiKey: '' };
    const obj = JSON.parse(raw);
    return {
      cooldownMin: Number(obj.cooldownMin) || 60,
      testingMode: !!obj.testingMode,
      dailyLock:   obj.dailyLock === undefined ? true : !!obj.dailyLock, // ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå "‡πÄ‡∏õ‡∏¥‡∏î"
      apiKey: obj.apiKey || ''
    };
  }catch(e){
    return { cooldownMin: 0, testingMode: false, dailyLock: true, apiKey: '' };
  }
}

function saveConfig(){
  const obj = {
    cooldownMin: Number(cfgCooldown.value) || 60,
    testingMode: !!cfgTesting.checked,
    dailyLock:   !!cfgDailyLock.checked,
    apiKey: (cfgApiKey.value || '').trim()
  };
  localStorage.setItem(CONFIG_KEY, JSON.stringify(obj));

  // sync ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  CONFIG.cooldownMin = obj.cooldownMin;
  CONFIG.testingMode = obj.testingMode;
  CONFIG.dailyLock   = obj.dailyLock;
  CONFIG.apiKey      = obj.apiKey;

  // ‡∏£‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°/‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  const now = Date.now();
  const remain = msLeft(now);
  if(remain > 0){ hideSpin(); cooldownNote.classList.remove('hidden'); startCountdown(remain); }
  else { cooldownNote.classList.add('hidden'); showSpin(); }

  alert('Saved / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
}

cfgSave?.addEventListener('click', saveConfig);

// ===== Persist last result per player (today) =====
const LASTRESULT_PREFIX = 'leela:lastResult:';
function lastResultKey(){ return LASTRESULT_PREFIX + playerKey(); }

// ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function nextLocalMidnight(ts = Date.now()){
  const d = new Date(ts);
  d.setHours(24,0,0,0);
  return d.getTime();
}
// ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
function isSameLockPeriod(ts){
  return Date.now() < nextLocalMidnight(ts);
}

// ‡πÇ‡∏ä‡∏ß‡πå‡∏ú‡∏•‡∏à‡∏≤‡∏Å row/imgPath/ts ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô restore)
function renderExistingResult({ row, imgPath, ts }){
  resultTitle.textContent = `‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${player.firstName} ${player.lastName} / This quote has been chosen for you`;
  quoteEN.textContent = row.Quote || '';
  quoteTH.textContent = row.Translated || '';

  const qEN = formatQuoteDate(row.Date, 'en');
  const qTH = formatQuoteDate(row.Date, 'th');
  const pEN = formatPlayedAt(ts, 'en');
  const pTH = formatPlayedAt(ts, 'th');
  resultMeta.innerHTML =
    `Quote Date: ${qEN} ‚Ä¢ Played at: ${pEN}<br>` +
    `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Å‡∏•‡πà‡∏≤‡∏ß: ${qTH} ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô: ${pTH}`;

  // ‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° CORS)
  resultImage.crossOrigin = 'anonymous';
  resultImage.decoding = 'sync';
  resultImage.loading  = 'eager';
  resultImage.onerror  = () => { resultImage.onerror = null; resultImage.src = PLACEHOLDER_IMG; };
  resultImage.src      = imgPath;
  enableSaveNow();
  resultImage.addEventListener('load', enableSaveNow, { once:true });
  // ‡∏†‡∏≤‡∏û‡∏ù‡∏±‡πà‡∏á export (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  if (exImage){
    exImage.crossOrigin = 'anonymous';
    exImage.decoding = 'sync';
    exImage.loading  = 'eager';
    exImage.onerror  = null;
    exImage.src      = imgPath;
  }

  // ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ã‡∏ü‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
  resultImgReady = waitImageReady(resultImage);

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î + ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  resultCard.hidden = false;
  playArea.classList.add('has-result');
  if (saveCard) saveCard.disabled = false;   // <-- ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Save ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

  hideSpin();

  // ‡∏ï‡∏±‡πâ‡∏á lastPlay ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏•‡πá‡∏≠‡∏Å
  setLastPlay(ts);
  const remain = msLeft(Date.now());
  if (remain > 0){
    cooldownNote.classList.remove('hidden');
    startCountdown(remain);
    // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    playAgain?.classList.add('hidden');
  } else {
    cooldownNote.classList.add('hidden');
    playAgain?.classList.remove('hidden');
    playAgain.disabled = true; // ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ã‡∏ü‡∏Å‡πà‡∏≠‡∏ô
    enableSaveNow();
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï lastResult ‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ã‡∏ü‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  lastResult = { qi: QUOTES.indexOf(row), img: (imgPath.split('/').pop() || ''), ts };
}

// ========== Helpers ==========
function secureRandomInt(n){
  if (!n || n <= 0) return 0;
  if (window.crypto?.getRandomValues){
    const u32 = new Uint32Array(1);
    window.crypto.getRandomValues(u32);
    return u32[0] % n;
  }
  return Math.floor(Math.random() * n);
}

function enableSaveNow(){
  if (!saveCard) return;
  saveCard.disabled = false;
  saveCard.classList.remove('is-disabled');
}

function waitNextFrame(){ return new Promise(r => requestAnimationFrame(()=>r())); }
async function waitFontsReady(){ try{ if(document.fonts?.ready) await document.fonts.ready; }catch(_){} }

async function waitImageReady(img){
  if(!img) return;
  if(!(img.complete && img.naturalWidth > 0)){
    await new Promise(res=>{
      const done = ()=>res();
      img.addEventListener('load', done, { once:true });
      img.addEventListener('error', done, { once:true });
    });
  }
  if(img.decode){ try{ await img.decode(); }catch(_){} }
  await waitNextFrame();
}

async function toDataURL(url){
  try{
    const res = await fetch(url, { cache: 'force-cache' });
    const blob = await res.blob();
    return await new Promise((resolve, reject)=>{
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }catch(e){
    console.warn('toDataURL failed, using placeholder:', e);
    return PLACEHOLDER_IMG;
  }
}

// Seeded RNG / numerology-ish
function nameValue(str=''){
  let sum = 0;
  for(const ch of str.toUpperCase()){
    const code = ch.charCodeAt(0);
    if(code>=65 && code<=90) sum += (code-64);
  }
  return sum;
}
function digitalRoot(n){
  n = Math.abs(n);
  while(n>9) n = n.toString().split('').reduce((a,b)=>a+Number(b),0);
  return n || 1;
}
//----- RNG 

// ====== Daily shuffle + No-repeat helpers ======
function todayStr(){
  const d = new Date();  // local time
  const y = d.getFullYear();
  const m = String(d.getMonth()+1).padStart(2,'0');
  const da= String(d.getDate()).padStart(2,'0');
  return `${y}-${m}-${da}`;
}
function makeDaySeed(dayStr){ // simple FNV-ish hash
  let h = 2166136261 >>> 0;
  for (const c of dayStr) { h ^= c.charCodeAt(0); h = Math.imul(h, 16777619); h >>>= 0; }
  return h || 0x9e3779b9;
}
function dailyPermutation(n, seedStr=todayStr()){
  const arr = Array.from({length:n}, (_,i)=>i);
  const rng = mulberry32(makeDaySeed(seedStr));
  for (let i=n-1; i>0; i--){
    const j = Math.floor(rng() * (i+1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}
// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‚Üí‡πÄ‡∏•‡∏Ç (‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
function nameSlotForName(n, first='', last=''){
  const s = `${first} ${last}`.trim().toLowerCase();
  let h=0; for (const ch of s){ h = ((h<<5)-h) + ch.charCodeAt(0); h|=0; }
  return Math.abs(h) % Math.max(1,n);
}

// --- No-repeat window (‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ) ---
const HISTORY_PREFIX = 'leela:hist:';   // key ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
const NO_REPEAT_DAYS = 7;               // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
const MAX_TRIES = 4;

function playerHistKey(){               // reuse playerKey() ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î
  return HISTORY_PREFIX + (playerKey?.() || 'anon');
}
function getHistory(){
  try{
    const raw = localStorage.getItem(playerHistKey());
    const arr = raw ? JSON.parse(raw) : [];
    const cutoff = Date.now() - NO_REPEAT_DAYS*24*60*60*1000;
    return arr.filter(x => Number(x?.ts)||0 >= cutoff);
  }catch{ return []; }
}
function pushHistory(qi){
  const arr = getHistory();
  arr.push({ qi, ts: Date.now() });
  while (arr.length > 64) arr.shift();
  localStorage.setItem(playerHistKey(), JSON.stringify(arr));
}
function pickNonRepeatingIndex(baseQi, perm){
  const used = new Set(getHistory().map(x=>x.qi));
  if (!used.has(baseQi)) return baseQi;
  let pos = perm.indexOf(baseQi);
  for (let t=0; t<MAX_TRIES; t++){
    pos = (pos + 1) % perm.length;
    const cand = perm[pos];
    if (!used.has(cand)) return cand;
  }
  return baseQi; // ‡∏¢‡∏≠‡∏°‡∏ã‡πâ‡∏≥‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
}

// Seeded RNG
function mulberry32(seed){
  return function(){
    let t = seed += 0x6D2B79F5;
    t = Math.imul(t ^ (t >>> 15), t | 1);
    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
  };
}
function makeSeed(first,last,ts){
  const base = nameValue(first) + nameValue(last)*31 + digitalRoot(nameValue(first)+nameValue(last))*997;
  const mix = (base ^ (ts & 0xffffffff)) >>> 0;
  return mix || 123456789;
}

// ----- Date formatting helpers -----
const EN_MONTHS = ['January','February','March','April','May','June',
  'July','August','September','October','November','December'];
const TH_MONTHS_ABBR = ['‡∏°.‡∏Ñ.','‡∏Å.‡∏û.','‡∏°‡∏µ.‡∏Ñ.','‡πÄ‡∏°.‡∏¢.','‡∏û.‡∏Ñ.','‡∏°‡∏¥.‡∏¢.',
  '‡∏Å.‡∏Ñ.','‡∏™.‡∏Ñ.','‡∏Å.‡∏¢.','‡∏ï.‡∏Ñ.','‡∏û.‡∏¢.','‡∏ò.‡∏Ñ.'];

const pad2 = n => String(n).padStart(2,'0');

function parseQuoteDateParts(raw){
  if(!raw) return {y:null,m:null,d:null,raw:''};
  const s = String(raw).trim().replace(/^"|"$/g,'');
  // mm/dd/yyyy
  const mdy = s.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
  if(mdy) return { y: +mdy[3], m: +mdy[1], d: +mdy[2], raw:s };
  // yyyy-mm
  const ym = s.match(/^(\d{4})-(\d{1,2})$/);
  if(ym) return { y: +ym[1], m: +ym[2], d: null, raw:s };
  // yyyy
  const y = s.match(/^(\d{4})$/);
  if(y) return { y: +y[1], m: null, d: null, raw:s };
  // not matched -> fallback to raw string
  return { y:null,m:null,d:null,raw:s };
}

function formatQuoteDate(raw, lang='en'){
  const {y,m,d,raw:s} = parseQuoteDateParts(raw);
  if(y==null) return s || '-';
  if(lang==='en'){
    if(m && d) return `${d} ${EN_MONTHS[m-1]} ${y}`;
    if(m && !d) return `${EN_MONTHS[m-1]} ${y}`;
    return String(y);
  }else{ // th
    const by = y + 543;
    if(m && d) return `${d} ${TH_MONTHS_ABBR[m-1]} ${by}`;
    if(m && !d) return `${TH_MONTHS_ABBR[m-1]} ${by}`;
    return String(by);
  }
}

function formatPlayedAt(ts, lang='en'){
  const d = new Date(ts);
  const day = d.getDate();
  const m = d.getMonth()+1;
  const y = d.getFullYear();
  const hh = pad2(d.getHours()), mm = pad2(d.getMinutes()), ss = pad2(d.getSeconds());
  if(lang==='en'){
    return `${day} ${EN_MONTHS[m-1]} ${y}, ${hh}:${mm}:${ss}`;
  }else{
    return `${day} ${TH_MONTHS_ABBR[m-1]} ${y+543}, ${hh}:${mm}:${ss}`;
  }
}


// ========== Data loading ==========
async function loadData(){
  try {
    // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô
    let res = await fetch('./data/quotes_th.json', { cache: 'no-store' });
    if (!res.ok) {
      console.warn('quotes_th.json not found, fallback to quotes.json');
      res = await fetch('./data/quotes.json', { cache: 'no-store' });
    }
    QUOTES = await res.json();
    if (!Array.isArray(QUOTES) || QUOTES.length === 0) throw new Error('quotes data empty');

    // ‡πÇ‡∏´‡∏•‡∏î manifest ‡∏£‡∏π‡∏õ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    try {
      const r = await fetch('./assets/smjm-manifest.json', { cache: 'no-store' });
      IMAGES = r.ok ? await r.json() : [];
      if (!Array.isArray(IMAGES)) IMAGES = [];
    } catch(e){
      console.warn('manifest load fail:', e);
      IMAGES = [];
    }
    dataReady = true;
    console.log(`Loaded quotes: ${QUOTES.length}, images: ${IMAGES.length}`);
  } catch (e) {
    console.error('loadData failed:', e);
    alert('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏ï‡∏£‡∏ß‡∏à public/data/quotes_th.json ‡∏´‡∏£‡∏∑‡∏≠ quotes.json ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡πà‡∏∞');
  }
}

// ========== Hold-to-Spin visuals ==========
function speedFromHold(ms){ return Math.max(300, Math.min(1200, 1200 - (ms * 0.8))); }
function beginSpinVisual(){
  spinning = true;
  spinButton.classList.add('is-spinning');
  spinButton.style.setProperty('--spin-speed', '.9s');
}
function updateSpinVisual(ms){
  const spd = speedFromHold(ms);
  spinButton.style.setProperty('--spin-speed', `${Math.round(spd)}ms`);
}
function endSpinVisualEaseOut(){
  spinButton.style.setProperty('--spin-speed', '1200ms');
  setTimeout(() => { spinButton.classList.remove('is-spinning'); }, 600);
}
function resetSpinState(){
  spinning=false; startedHold=false; isRevealing=false;
  holdMs=0; holdStart=0;
  if(holdTimer){ clearInterval(holdTimer); holdTimer=null; }
  spinButton.classList.remove('is-spinning','pulse');
  spinButton.style.removeProperty('--spin-speed');
}
function hideSpin(){ spinButton.classList.add('hidden'); }
function showSpin(){
  resetSpinState();
  spinButton.classList.remove('hidden');
  setTimeout(()=>{ spinButton.classList.add('pulse'); setTimeout(()=>spinButton.classList.remove('pulse'),1200); }, 80);
}

// ========== Cooldown ==========
function playerKey(){
  const name = `${player.firstName} ${player.lastName}`.trim().toLowerCase();
  let h=0; for(const c of name){ h=((h<<5)-h)+c.charCodeAt(0); h|=0; }
  return LASTPLAY_PREFIX + h;
}

function nextLocalMidnight(ts = Date.now()){
  const d = new Date(ts);
  d.setHours(24,0,0,0);
  return d.getTime();
}

function msLeft(now = Date.now()){
  if (DEV_BYPASS) return 0;         // <<< ‡∏ï‡∏±‡∏î‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏™
  if (CONFIG.testingMode) return 0;

  const last = getLastPlay();
  if (!last) return 0;

  if (CONFIG.dailyLock){
    const lockUntil = nextLocalMidnight(last);
    return Math.max(0, lockUntil - now);
  } else {
    const cd = (Number(CONFIG.cooldownMin)||0) * 60_000;
    if (cd <= 0) return 0;
    return Math.max(0, (last + cd) - now);
  }
}

function getLastPlay(){ const raw = localStorage.getItem(playerKey()); return raw ? Number(raw) : 0; }
function setLastPlay(ts){ localStorage.setItem(playerKey(), String(ts)); }

function stopCountdown(){ if(cdTimer){ clearInterval(cdTimer); cdTimer=null; } }
function updateCountdown(ms){
  const s = Math.ceil(ms/1000);
  const hh = Math.floor(s/3600);
  const mm = Math.floor((s%3600)/60);
  const ss = s%60;
  const pad = n => String(n).padStart(2,'0');
  const en = (hh>0? `${hh}:`:'') + `${pad(mm)}:${pad(ss)}`;
  cdEn.textContent = en; cdTh.textContent = en;
}

// ========== Hold-to-Spin wiring ==========
function attachHoldToSpin(){
  if (holdBound) return; holdBound = true;

  // swallow click to avoid double-trigger
  spinButton.addEventListener('click', e => { e.preventDefault(); e.stopPropagation(); }, true);

  const start = (e) => {
    if (!dataReady || isRevealing || spinning) return;
    e.preventDefault();
    try { e.currentTarget.setPointerCapture?.(e.pointerId); } catch(_) {}

    startedHold = true;
    holdStart = Date.now();
    beginSpinVisual();
    holdTimer = setInterval(() => {
      holdMs = Date.now() - holdStart;
      updateSpinVisual(holdMs);
    }, 60);
  };

  const end = async (e) => {
    if (!startedHold) return;
    e.preventDefault();
    startedHold = false;
    clearInterval(holdTimer); holdTimer = null;
    holdMs = Date.now() - holdStart;

    endSpinVisualEaseOut();
    const settle = Math.min(1200, Math.max(600, holdMs * 0.6));
    await new Promise(r => setTimeout(r, settle));

    await revealLeelaResultOnce();
    spinning = false;
  };

  spinButton.addEventListener('pointerdown', start, {passive:false});
  spinButton.addEventListener('pointerup', end, {passive:false});
  spinButton.addEventListener('pointercancel', end, {passive:false});
  spinButton.addEventListener('pointerleave', end, {passive:false});

  // keyboard
  spinButton.addEventListener('keydown', (e)=>{
    if(e.code === 'Space' || e.code === 'Enter'){ e.preventDefault(); start(e); }
  });
  spinButton.addEventListener('keyup', (e)=>{
    if(e.code === 'Space' || e.code === 'Enter'){ e.preventDefault(); end(e); }
  });
}

// ========== Reveal & Render ==========
async function revealLeelaResultOnce(){
  if (isRevealing) return;
  isRevealing = true;

  try{
    if (!dataReady || QUOTES.length === 0){
      alert('Data not ready / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à');
      return;
    }

    const ts = Date.now();

    // ===== DEV branch: random ‡∏•‡πâ‡∏ß‡∏ô (‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å/‡πÑ‡∏°‡πà‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå/‡πÑ‡∏°‡πà restore) =====
    if (typeof DEV_BYPASS !== 'undefined' && DEV_BYPASS){
      try{ localStorage.removeItem(lastResultKey()); }catch(_){}

      // ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠/‡∏ß‡∏±‡∏ô
      const qi = secureRandomInt(QUOTES.length);
      const row = QUOTES[qi];

      let imgPath = './assets/img/hero.jpg';
      if (Array.isArray(IMAGES) && IMAGES.length){
        const ii = secureRandomInt(IMAGES.length);
        imgPath = `./assets/smjm/${IMAGES[ii]}`;
      }

      lastResult = { qi, img: (imgPath.split('/').pop() || ''), ts };

      const inlinedImg = await toDataURL(imgPath);

      // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î
      resultTitle.textContent = `‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${player.firstName} ${player.lastName} / This quote has been chosen for you`;
      quoteEN.textContent = row.Quote || '';
      quoteTH.textContent = row.Translated || '(Thai translation unavailable / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•)';

      const qEN = formatQuoteDate(row.Date, 'en');
      const qTH = formatQuoteDate(row.Date, 'th');
      const pEN = formatPlayedAt(ts, 'en');
      const pTH = formatPlayedAt(ts, 'th');
      resultMeta.innerHTML =
        `Quote Date: ${qEN} ‚Ä¢ Played at: ${pEN}<br>` +
        `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Å‡∏•‡πà‡∏≤‡∏ß: ${qTH} ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô: ${pTH}`;

      resultImage.decoding = 'sync';
      resultImage.loading  = 'eager';
      resultImage.onerror  = () => { resultImage.onerror = null; resultImage.src = PLACEHOLDER_IMG; };
      resultImage.src      = inlinedImg;

      enableSaveNow();
      resultImage.addEventListener('load', enableSaveNow, { once: true });  

      if (exImage){
        exImage.decoding = 'sync';
        exImage.loading  = 'eager';
        exImage.onerror  = null;
        exImage.src      = inlinedImg;
      }
      resultImgReady = waitImageReady(resultImage);

      resultCard.hidden = false;
      playArea.classList.add('has-result');
      hideSpin();

      // DEV: ‡πÑ‡∏°‡πà‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å lastPlay/history ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
      cooldownNote.classList.add('hidden');
      playAgain?.classList.remove('hidden');
      playAgain.disabled = false;
      if (saveCard) saveCard.disabled = false;

      return; // ‡∏≠‡∏¢‡πà‡∏≤‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏Å‡∏¥‡πà‡∏á Production
    }

    // ===== Production branch: Daily shuffle + No-repeat + ‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á =====

    // ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏£‡∏ì‡∏µ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
    try{ localStorage.removeItem(lastResultKey()); }catch(_){}

    // 1) permutation ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    const quotePerm = dailyPermutation(QUOTES.length);
    const imagePerm = (Array.isArray(IMAGES) && IMAGES.length)
      ? dailyPermutation(IMAGES.length)
      : [];

    // 2) map ‡∏ä‡∏∑‡πà‡∏≠ ‚Üí slot ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
    const slot = nameSlotForName(QUOTES.length, player.firstName, player.lastName);

    // 3) base index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const baseQi = quotePerm[slot];

    // 4) ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ä‡πà‡∏ß‡∏á X ‡∏ß‡∏±‡∏ô
    const qi  = pickNonRepeatingIndex(baseQi, quotePerm);
    const row = QUOTES[qi];

    // 5) ‡∏£‡∏π‡∏õ: daily shuffle (+ jitter ‡∏ï‡∏≤‡∏° ts ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô)
    let imgPath = './assets/img/hero.jpg';
    if (imagePerm.length){
      const jitter  = Math.abs((ts >>> 0) % imagePerm.length);
      const imgSlot = (slot + 7 + jitter) % imagePerm.length;
      const ii = imagePerm[imgSlot];
      imgPath = `./assets/smjm/${IMAGES[ii]}`;
    }

    // 6) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á lastResult
    pushHistory(qi);
    lastResult = { qi, img: (imgPath.split('/').pop() || ''), ts };

    // inline ‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏ï‡∏≠‡∏ô save
    const inlinedImg = await toDataURL(imgPath);

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î
    resultTitle.textContent = `‡∏Ñ‡∏≥‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${player.firstName} ${player.lastName} / This quote has been chosen for you`;
    quoteEN.textContent = row.Quote || '';
    quoteTH.textContent = row.Translated || '(Thai translation unavailable / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•)';

    const qEN = formatQuoteDate(row.Date, 'en');
    const qTH = formatQuoteDate(row.Date, 'th');
    const pEN = formatPlayedAt(ts, 'en');
    const pTH = formatPlayedAt(ts, 'th');
    resultMeta.innerHTML =
      `Quote Date: ${qEN} ‚Ä¢ Played at: ${pEN}<br>` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Å‡∏•‡πà‡∏≤‡∏ß: ${qTH} ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô: ${pTH}`;

    resultImage.decoding = 'sync';
    resultImage.loading  = 'eager';
    resultImage.onerror  = () => { resultImage.onerror = null; resultImage.src = PLACEHOLDER_IMG; };
    resultImage.src      = inlinedImg;

    if (exImage){
      exImage.decoding = 'sync';
      exImage.loading  = 'eager';
      exImage.onerror  = null;
      exImage.src      = inlinedImg;
    }
    resultImgReady = waitImageReady(resultImage);

    resultCard.hidden = false;
    playArea.classList.add('has-result');
    hideSpin();

    // ‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå
    setLastPlay(ts);

    // ‡πÄ‡∏ã‡∏ü‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ restore ‡πÄ‡∏°‡∏∑‡πà‡∏≠ reload
    try{ localStorage.setItem(lastResultKey(), JSON.stringify(lastResult)); }catch(_){}

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï countdown + ‡∏õ‡∏∏‡πà‡∏°
    const remain = msLeft(Date.now());
    if (remain > 0){
      cooldownNote.classList.remove('hidden');
      startCountdown(remain);
      playAgain?.classList.add('hidden');
    } else {
      cooldownNote.classList.add('hidden');
      playAgain?.classList.remove('hidden');
      playAgain.disabled = true;
    }
    if (saveCard) saveCard.disabled = false;

  } finally {
    setTimeout(()=>{ isRevealing = false; }, 200);
  }
}


// ========== Save as PNG (screen-cap resultCard) ==========
saveCard?.addEventListener('click', async () => {
  if (resultCard.hidden) return;

  saveCard.disabled = false;
  const oldLabel = saveCard.textContent;
  saveCard.textContent = 'Saving...';
  console.log('[DEBUG-SAVE] Save initiated. Applying 2-Pass Render Fix for Safari.');

  // >>> hoist ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö overlay/restore ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ô‡∏≠‡∏Å try
  let overlay = null;
  let overlayRestore = null;

  try {
    await waitFontsReady();
    if (resultImgReady) await resultImgReady; else await waitImageReady(resultImage);
    await waitNextFrame();

    // ‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤/‡∏ó‡∏£‡∏≤‡∏ô‡∏™‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏Ñ‡∏õ
    const prev = {
      opacity: resultCard.style.opacity,
      transform: resultCard.style.transform,
      boxShadow: resultCard.style.boxShadow
    };
    resultCard.style.opacity = '1';
    resultCard.style.transform = 'none';
    resultCard.style.boxShadow = 'none';

    const renderOptions = {
      backgroundColor: '#ffffff',
      pixelRatio: Math.max(2, window.devicePixelRatio || 1),
      cacheBust: false,
      imagePlaceholder: PLACEHOLDER_IMG,
      filter: (node) => !(node.classList && node.classList.contains('result-actions')),
    };

    // [EXPORT TITLE OVERLAY ‚Äî column-aware, no overlap]
    const prevCardPos = resultCard.style.position;
    const needRelative = getComputedStyle(resultCard).position === 'static';
    if (needRelative) resultCard.style.position = 'relative';

    overlay = document.createElement('div');
    overlay.textContent = 'Sahaja Yoga Leela Game';
    overlay.style.cssText = `
      position:absolute; text-align:center; font-weight:800; font-size:18px; letter-spacing:.2px;
      color:#111; pointer-events:none; z-index:10;
      padding:2px 8px; border-radius:10px;
      background:rgba(255,255,255,0.95); box-shadow:0 2px 6px rgba(0,0,0,.06);
      visibility:hidden;
    `;
    resultCard.appendChild(overlay);

    try {
      const cardRect  = resultCard.getBoundingClientRect();
      const titleRect = resultTitle.getBoundingClientRect();
      const imgRect   = resultImage.getBoundingClientRect();

      // ‡πÉ‡∏´‡πâ overlay ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
      const leftPx  = Math.max(0, titleRect.left - cardRect.left);
      const widthPx = Math.max(120, titleRect.width);
      overlay.style.left  = `${leftPx}px`;
      overlay.style.width = `${widthPx}px`;

      // ‡∏£‡∏≠‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
      overlay.style.visibility = 'hidden';
      await waitNextFrame();
      const overlayH = overlay.offsetHeight || 22;

      const GAP_ABOVE_TITLE = 10;  // ‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
      const GAP_BELOW_IMAGE = 8;   // ‡πÄ‡∏ß‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏£‡∏π‡∏õ

      const titleTopRel = titleRect.top - cardRect.top;
      const imgBottomRel = imgRect.bottom - cardRect.top;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ ‚Äú‡∏ó‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‚Äù ‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const overlapX = !(imgRect.right <= titleRect.left || imgRect.left >= titleRect.right);

      let topRel;
      if (overlapX) {
        // ‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏ä‡πà‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠) ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡∏ó‡∏±‡∏ö‡∏£‡∏π‡∏õ
        topRel = Math.max(imgBottomRel + GAP_BELOW_IMAGE,
                          titleTopRel - overlayH - GAP_ABOVE_TITLE);
      } else {
        // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤ (‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ) ‚Üí ‡∏¢‡∏∂‡∏î‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏°‡∏≠
        topRel = Math.max(8, titleTopRel - overlayH - GAP_ABOVE_TITLE);
      }

      overlay.style.top = `${topRel}px`;
      overlay.style.visibility = 'visible';

      // ‡∏î‡∏±‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‚Äú‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‚Ä¶‚Äù ‡∏•‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡∏• + ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏ü‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      const prevTitleMarginTop = resultTitle.style.marginTop;
      const currMT = parseFloat(getComputedStyle(resultTitle).marginTop) || 0;
      const EXTRA_GAP = 12;
      resultTitle.style.marginTop = (currMT + overlayH + EXTRA_GAP) + 'px';

      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ (‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô finally)
      overlayRestore = () => {
        overlay && overlay.remove();
        resultTitle.style.marginTop = prevTitleMarginTop || '';
        if (needRelative) resultCard.style.position = prevCardPos || '';
      };
    } catch (e) {
      // fallback: ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏ã‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      overlay.style.left = '0';
      overlay.style.width = '100%';
      overlay.style.top = '12px';
      overlay.style.visibility = 'visible';
      overlayRestore = () => {
        overlay && overlay.remove();
        if (needRelative) resultCard.style.position = prevCardPos || '';
      };
    }

    // üéØ PASS 1: Dummy render
    console.log('[DEBUG-SAVE] Starting PASS 1 (Dummy Render) for Safari repaint...');
    await htmlToImage.toCanvas(resultCard, renderOptions);

    await new Promise(r => setTimeout(r, 50));
    await waitNextFrame();

    // üéØ PASS 2: Final render ‚Üí PNG
    console.log('[DEBUG-SAVE] Starting PASS 2 (Final Render) and converting to PNG.');
    const canvas = await htmlToImage.toCanvas(resultCard, renderOptions);
    const dataUrl = canvas.toDataURL('image/png');

    // ‡∏•‡πâ‡∏≤‡∏á Canvas ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    canvas.width = canvas.height = 0;

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ style ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á resultCard)
    resultCard.style.opacity = prev.opacity;
    resultCard.style.transform = prev.transform;
    resultCard.style.boxShadow = prev.boxShadow;

    // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    const safe = s => (s||'').toString().trim().replace(/\s+/g,'-').replace(/[^-\w]+/g,'');
    const f = safe(player.firstName), l = safe(player.lastName);
    const qid = (lastResult && typeof lastResult.qi === 'number') ? String(lastResult.qi).padStart(4,'0') : '0000';
    const stamp = new Date(lastResult?.ts || Date.now()).toISOString().slice(0,19).replace(/[:T]/g,'-');
    const filename = `LeelaCard-${f}-${l}-${qid}-${stamp}.png`;

    const a = document.createElement('a');
     
    a.href = dataUrl; a.download = filename;
    document.body.appendChild(a); a.click(); a.remove();


    playAgain.disabled = false;

  } catch (err) {
    console.error('[DEBUG-SAVE] Save PNG failed:', err);
    alert('Save failed. Please try again / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞');
  } finally {
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ overlay/margin/position ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏™‡∏°‡∏≠
    if (typeof overlayRestore === 'function') {
      try { overlayRestore(); } catch(_) {}
    }
    saveCard.disabled = false;
    saveCard.textContent = oldLabel;
  }
});


// ========== Form & Flow ==========
form?.addEventListener('submit', async (e) => {
  e.preventDefault();
  const fd = new FormData(form);
  player.firstName = String(fd.get('firstName') || '').trim();
  player.lastName  = String(fd.get('lastName')  || '').trim();
  if(!player.firstName || !player.lastName){
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)');
    return;
  }
  if(inputCard) inputCard.classList.add('hidden'); // ‡∏ã‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠
  playerNameEl.textContent = `${player.firstName} ${player.lastName}`;
  playArea.hidden = false;
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  playArea.classList.remove('has-result');
  resultCard.hidden = true;
  // if (saveCard) saveCard.disabled = true;
  if (playAgain) playAgain.disabled = true;

  window.scrollTo({top: playArea.offsetTop - 12, behavior: 'smooth'});

  if(QUOTES.length === 0) await loadData();

  // --- Restore today's result if exists for this player ---
  try{
    const savedRaw = localStorage.getItem(lastResultKey());
    if (!DEV_BYPASS && savedRaw){                 // <<< ‡∏Ç‡πâ‡∏≤‡∏° restore ‡πÄ‡∏°‡∏∑‡πà‡∏≠ DEV
      const saved = JSON.parse(savedRaw);
      if (saved && typeof saved.qi === 'number' && QUOTES[saved.qi] && isSameLockPeriod(saved.ts)){
        const row = QUOTES[saved.qi];
        const imgPath = saved.img ? (saved.img.includes('/') ? saved.img : `./assets/smjm/${saved.img}`) : './assets/img/hero.jpg';
        renderExistingResult({ row, imgPath, ts: saved.ts });
        return;
      }
    }
  }catch(_){}

  const now = Date.now();
  const remain = msLeft(now);
  if(remain > 0){
    hideSpin();
    cooldownNote.classList.remove('hidden');
    startCountdown(remain);
  }else{
    cooldownNote.classList.add('hidden');
    showSpin();
  }
});

// Admin: tap hero 7 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î panel
(function secretAdmin(){
  const hero = document.querySelector('.hero__image');
  if(!hero) return;
  let taps = 0, timer=null;
  const reset = ()=>{ taps=0; if(timer){clearTimeout(timer); timer=null;} };
  hero.addEventListener('click', ()=>{
    taps++;
    if(timer) clearTimeout(timer);
    timer = setTimeout(reset, 1200);
    if(taps>=7){
      adminPanel.classList.toggle('hidden');
      reset();
      if(cfgCooldown) cfgCooldown.value = CONFIG.cooldownMin;
      if(cfgTesting)  cfgTesting.checked = CONFIG.testingMode;
      if(cfgApiKey)   cfgApiKey.value = CONFIG.apiKey;
    }
  });
})();

playAgain?.addEventListener('click', () => {
  // üí° NEW: ‡∏ñ‡πâ‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å disable ‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  if(playAgain.disabled) return; 

  resultCard.hidden = true;
  quoteEN.textContent = '';
  quoteTH.textContent = '';
  resultMeta.textContent = '';

  // üí° NEW: ‡πÇ‡∏ä‡∏ß‡πå‡∏õ‡∏∏‡πà‡∏° Spin ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ 
  // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Visibility ‡πÅ‡∏•‡∏∞ Disable ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
  cooldownNote.classList.add('hidden');
  showSpin();

  // ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Play Again
  playAgain.classList.add('hidden'); 
});


// Init
document.addEventListener('DOMContentLoaded', () => {
  if(cfgCooldown)  cfgCooldown.value   = CONFIG.cooldownMin;
  if(cfgTesting)   cfgTesting.checked  = CONFIG.testingMode;
  if(cfgDailyLock) cfgDailyLock.checked= CONFIG.dailyLock;
  if(cfgApiKey)    cfgApiKey.value     = CONFIG.apiKey;

  // <<<<<< ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  if (DEV_BYPASS){
    CONFIG.testingMode = true;                // ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î
    if (cfgTesting){ cfgTesting.checked = true; cfgTesting.disabled = true; }
    if (cfgDailyLock){ cfgDailyLock.checked = false; cfgDailyLock.disabled = true; }
  }
  enableSaveNow();            // ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏°‡∏≠
  loadData();
  attachHoldToSpin();
});